//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль базового ядра
// Подраздел: Подсистема интерфейсов
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusInterfaceOwner.cs
*		Определение интерфейсов связанных с отношением владения объектом.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 04.04.2021
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CoreInterfaces
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый интерфейс реализующий понятие владельца
		/// </summary>
		/// <remarks>
		/// Владелец обладает каким-либо объектом и поддерживает основные операции по обновлению связей, 
		/// присоединением и отсоединением зависимого объекта
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusOwnerObject
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Присоединение указанного зависимого объекта
			/// </summary>
			/// <param name="owned_object">Объект</param>
			//---------------------------------------------------------------------------------------------------------
			void AttachOwnedObject(ILotusOwnedObject owned_object);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Отсоединение указанного зависимого объекта
			/// </summary>
			/// <param name="owned_object">Объект</param>
			//---------------------------------------------------------------------------------------------------------
			void DetachOwnedObject(ILotusOwnedObject owned_object);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление связей для зависимых объектов
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void UpdateOwnedObjects();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Информирование данного объекта о начале изменения данных указанного зависимого объекта
			/// </summary>
			/// <param name="owned_object">Зависимый объект</param>
			/// <param name="data">Объект, данные которого будут меняться</param>
			/// <param name="data_name">Имя данных</param>
			/// <returns>Статус разрешения/согласования изменения данных</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean OnNotifyUpdating(ILotusOwnedObject owned_object, System.Object data, String data_name);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Информирование данного объекта об окончании изменении данных указанного объекта
			/// </summary>
			/// <param name="owned_object">Зависимый объект</param>
			/// <param name="data">Объект, данные которого изменились</param>
			/// <param name="data_name">Имя данных</param>
			//---------------------------------------------------------------------------------------------------------
			void OnNotifyUpdated(ILotusOwnedObject owned_object, System.Object data, String data_name);
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс реализующий понятие владельца
		/// </summary>
		/// <remarks>
		/// Владелец обладает каким-либо объектом и поддерживает основные операции по обновлению связей, 
		/// присоединением и отсоединением зависимого объекта
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public class COwnerObject : PropertyChangedBase, ILotusOwnerObject
		{
			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public COwnerObject()
			{

			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Присоединение указанного зависимого объекта
			/// </summary>
			/// <param name="owned_object">Объект</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void AttachOwnedObject(ILotusOwnedObject owned_object)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Отсоединение указанного зависимого объекта
			/// </summary>
			/// <param name="owned_object">Объект</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void DetachOwnedObject(ILotusOwnedObject owned_object)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление связей для зависимых объектов
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void UpdateOwnedObjects()
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Информирование данного объекта о начале изменения данных указанного зависимого объекта
			/// </summary>
			/// <param name="owned_object">Зависимый объект</param>
			/// <param name="data">Объект, данные которого будут меняться</param>
			/// <param name="data_name">Имя данных</param>
			/// <returns>Статус разрешения/согласования изменения данных</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean OnNotifyUpdating(ILotusOwnedObject owned_object, System.Object data, String data_name)
			{
				return (true);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Информирование данного объекта об окончании изменении данных указанного объекта
			/// </summary>
			/// <param name="owned_object">Зависимый объект</param>
			/// <param name="data">Объект, данные которого изменились</param>
			/// <param name="data_name">Имя данных</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void OnNotifyUpdated(ILotusOwnedObject owned_object, System.Object data, String data_name)
			{

			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс объекта которым владеют
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusOwnedObject
		{
			/// <summary>
			/// Владелец объекта
			/// </summary>
			ILotusOwnerObject IOwner { get; set; }
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс реализующий объект которым владеют
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class COwnedObject : PropertyChangedBase, ILotusOwnedObject
		{
			#region ======================================= ДАННЫЕ ====================================================
			protected internal ILotusOwnerObject mOwner;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Владелец объекта
			/// </summary>
			public ILotusOwnerObject IOwner 
			{
				get { return (mOwner); } 
				set
				{
					mOwner = value;
					RaiseOwnerObjectChanged();
				}
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public COwnedObject()
			{

			}
			#endregion

			#region ======================================= СЛУЖЕБНЫЕ МЕТОДЫ СОБЫТИЙ ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Изменение владельца объекта.
			/// Метод автоматически вызывается после установки соответствующего свойства
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			protected virtual void RaiseOwnerObjectChanged()
			{
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс объекта которым владеет определенный тип владельца
		/// </summary>
		/// <typeparam name="TOwner">Тип владельца</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusOwnedObject<TOwner> : ILotusOwnedObject where TOwner : ILotusOwnerObject
		{
			/// <summary>
			/// Владелец объекта
			/// </summary>
			TOwner Owner { get; set; }
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Шаблон объекта которым владеет определенный тип владельца
		/// </summary>
		/// <typeparam name="TOwner">Тип владельца</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class OwnedObject<TOwner> : PropertyChangedBase, ILotusOwnedObject<TOwner>
			where TOwner : ILotusOwnerObject
		{
			#region ======================================= ДАННЫЕ ====================================================
			protected internal TOwner mOwner;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Владелец объекта
			/// </summary>
			public ILotusOwnerObject IOwner
			{
				get { return (mOwner); }
				set
				{
					mOwner = (TOwner)value;
					RaiseOwnerObjectChanged();
				}
			}

			/// <summary>
			/// Владелец объекта
			/// </summary>
			public TOwner Owner
			{
				get { return (mOwner); }
				set
				{
					mOwner = value;
					RaiseOwnerObjectChanged();
				}
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public OwnedObject()
			{

			}
			#endregion

			#region ======================================= СЛУЖЕБНЫЕ МЕТОДЫ СОБЫТИЙ ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Изменение владельца объекта.
			/// Метод автоматически вызывается после установки соответствующего свойства
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			protected virtual void RaiseOwnerObjectChanged()
			{
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================