//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль базового ядра
// Подраздел: Подсистема ресурсов
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusResourcesCommon.cs
*		Основные типы ресурсов в Unity.
*		Основные типы ресурсов и их характеристика.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.01.2022
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using UnityEngine;
//---------------------------------------------------------------------------------------------------------------------
using Lotus.Core;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \defgroup CoreUnityResource Подсистема ресурсов
		//! Подсистема ресурсов для загрузки доступных и управления существующими ресурсами.
		//! Работу с ресурсами в Unity нельзя назвать простой и понятной, особенно это касается ресурсов созданных/подгруженных
		//! или добавленных уже в готовое приложение. Тем более большинство ресурсов имеет закрытый формат файла.
		//!
		//! Запроектировано, во-первых, создать единый идентификатор для всех стандартных и собственных ресурсов, который будет
		//! содержать данные необходимые для динамического связывания ресурса, во-вторых, создать систему идентификации ресурса,
		//! которая будет включать источник создания ресурса, поддерживаемые способы загрузки/сохранения и некоторые другие параметры.
		//!
		//! Также подсистема содержит методы расширения для стандартных ресурсов.
		//! \ingroup CoreUnity
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Источник создания ресурса
		/// </summary>
		/// <remarks>
		/// Источник создания ресурса определяет, каким образом ресурс оказался доступен в приложении, а также возможные
		/// операции, которые могут быть применены к нему
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public enum TResourceCreation
		{
			/// <summary>
			/// Ресурс импортирован непосредственно в сборку.
			/// Поиск и доступ к ресурсу возможен только при его автоматической подгрузки и только по имени
			/// </summary>
			Directly,

			/// <summary>
			/// Ресурс импортирован в сборку, но находится директории "Resources".
			/// Поиск и доступ к ресурсу возможен по имени относительно директории "Resources" сборки.
			/// Возможна самостоятельная динамическая подгрузка через класс Resources
			/// </summary>
			Internal,

			/// <summary>
			/// Ресурс создан во внешней среде или программно в приложении с параметром сохранения.
			/// Обязательно должен быть в папке "ResourcesData" рабочей директории приложения при его загрузки
			/// </summary>
			External,

			/// <summary>
			/// Константный ресурс - ресурс, созданный программно или загруженный из специальных источников который доступен всегда.
			/// Доступ к ресурсу возможен по имени
			/// </summary>
			Const,

			/// <summary>
			/// Временный ресурс доступные только во время работы приложения.
			/// Динамическое связывание, сохранение идентификатора для таких ресурсов не целесообразно
			/// </summary>
			Temp
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Поддерживаемые режимы загрузки ресурса из внешних источников
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TResourceSupportLoad
		{
			/// <summary>
			/// Ресурс нельзя загрузить напрямую из внешних источников
			/// </summary>
			None,

			/// <summary>
			/// Ресурс поддерживает только обычную загрузку
			/// </summary>
			Sync,

			/// <summary>
			/// Ресурс поддерживает только асинхронную загрузку. Используется класс WWW
			/// </summary>
			Async,

			/// <summary>
			/// Ресурс поддерживает обычную загрузку и асинхронную загрузку
			/// </summary>
			SyncAndAsync
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Режим загрузки ресурса
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TResourceLoad
		{
			/// <summary>
			/// Обычная загрузка ресурса.
			/// Используются в основном для своих типов, для основных ресурсов требуется как правило писать собственные загрузчики
			/// </summary>
			Sync,

			/// <summary>
			/// Асинхронная загрузка. Используется класс WWW
			/// </summary>
			Async
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Универсальный идентификатор ресурсов Unity которые возможно загрузить во время работы приложения
		/// </summary>
		/// <remarks>
		/// Данный идентификатор содержит все сведения для идентификации и динамического связывания любого доступного ресурса в Unity. 
		/// Если компонент/игровой объект ссылается на ресурс, то ему будет достаточно сохранить идентификатор этого ресурса.
		/// В дальнейшем, путем использования диспетчера соответствующего ресурса возможна загрузка и повторное 
		/// динамическое связывания любого доступного ресурса в Unity
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class CResourceId : IComparable<CResourceId>
		{
			#region ======================================= КОНСТАНТНЫЕ ДАННЫЕ ========================================
			/// <summary>
			/// Имя элемента узла XML представляющего данный тип
			/// </summary>
			public const String XmlNameElement = "ResourceId";
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			internal String mName;
			internal String mPath;
			internal Int32 mIndex;
			internal Int32 mID;
			internal TResourceCreation mCreation;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Имя ресурса
			/// </summary>
			public String Name
			{
				get { return mName; }
			}

			/// <summary>
			/// Путь к ресурсу
			/// </summary>
			public String Path
			{
				get { return mPath; }
			}

			/// <summary>
			/// Имя источника ресурса, то по-которому данный ресурс можно корректно загрузить/восстановить.
			/// Может быть:
			/// - совпадать с именем ресурса, если он используется непосредственно внутри сборки или константный
			/// - путь относительно директории "Resources" сборки.
			/// - полный путь в формате URL, если требуется загрузить асинхронно.
			/// - относительный/абсолютный путь файла, если требуется загрузить обычно.
			/// </summary>
			public String SourceName
			{
				get { return mPath; }
			}

			/// <summary>
			/// Индекс ресурса. Обычное значение ноль.
			/// Но при пакетной загрузки ресурсов обозначает номер/позицию ресурса в массиве ресурсов
			/// </summary>
			public Int32 Index
			{
				get { return mIndex; }
			}

			/// <summary>
			/// Идентификатор ресурса
			/// Предназначен для более быстрого поиска ресурса
			/// </summary>
			public Int32 ID
			{
				get { return mID; }
			}

			/// <summary>
			/// Источник создания ресурса
			/// </summary>
			public TResourceCreation Creation
			{
				get { return mCreation; }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные идентификатора ресурса значениями по умолчанию
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CResourceId()
			{
				mName = String.Empty;
				mPath = String.Empty;
				mIndex = 0;
				mID = -1;
				mCreation = TResourceCreation.Internal;
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение идентификаторов ресурсов для упорядочивания
			/// </summary>
			/// <param name="other">Идентификатор ресурса</param>
			/// <returns>Статус сравнения идентификаторов ресурсов</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(CResourceId other)
			{
				if (this.mID > other.mID)
				{
					return 1;
				}
				else
				{
					if (this.mID == other.mID)
					{
						return String.CompareOrdinal(mPath, other.mPath);
					}
					else
					{
						return -1;
					}
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление идентификатора ресурса с указанием источника ресурса</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return SourceName;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================