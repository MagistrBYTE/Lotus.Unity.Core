//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль базового ядра
// Подраздел: Подсистема ввода
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusInputCommon.cs
*		Общие типы и интерфейсы подсистемы ввода.
*		Общие типы и структуры данных подсистемы ввода и определение основных интерфейсов для уведомления об основных
*	событий пользовательского ввода. Вызов методов интерфейсов происходит напрямую без дополнительных проверок и условий.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.01.2022
//=====================================================================================================================
using System;
using System.ComponentModel;
using UnityEngine;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \defgroup CoreUnityInput Подсистема ввода
		//! Подсистема ввода поддерживает абстрактный ввод не зависимо от источника данных и платформы (пользовательский ввод
		//! от мыши и клавиатуры или от интерфейса пользователя для мобильных платформ).
		//! Также подсистема ввод поддерживает событийное информировании о событий ввода через интерфейсы оповещения.
		//!
		//! ## Возможности/особенности
		//! 1. Простая работа с пулом готовых объектов
		//! 2. Общая и специальная реализация для Unity объектов
		//!
		//! ## Описание
		//! Подсистема позволяет получать, например, состояние некой кнопки независимо что представляет собой эту 
		//! кнопку - клавиатура, мышь или элемент интерфейса.
		//! Также подсистема информирует о событиях ввода посредством вызова соответствующего подписчика.
		//!
		//! ## Использование
		//! 1. Воспользуйтесь элементами GUI (UI) и зарегистрирует их с помощью методов \ref Lotus.Core.XInputDispatcher как соответствующие кнопки (или джойстики).
		//! Также можно зарегистрировать джойстик как основные оси - тогда они будут эмулировать ввод мыши и клавиатуры (W, S, A, D)
		//! 2. Реализовать соответствующие интерфейсы \ref Lotus.Core.ILotusPointerDown.
		//! 3. В событии Start/OnEnable скрипта подписаться на обработку событий по каждому реализованному интерфейсу.
		//! 4. В событии OnDestroy/OnDisable скрипта отписаться от обработки событий по каждому реализованному интерфейсу.
		//! 5. Диспетчер пользовательского ввода можно использовать в ручную(непосредственно вызывать его методы в нужных местах)
		//! или посредством \ref Lotus.Core.LotusSystemDispatcher
		//! \ingroup CoreUnity
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Перечисление кнопок мыши для управления
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TMouseButtonInput
		{
			/// <summary>
			/// Нет данных
			/// </summary>
			None = -1,

			/// <summary>
			/// Левая кнопка мыши
			/// </summary>
			Left = 0,

			/// <summary>
			/// Правая кнопка мыши
			/// </summary>
			Right = 1,

			/// <summary>
			/// Средняя кнопка мыши
			/// </summary>
			Middle = 2
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для эмуляции клавиши или кнопки
		/// </summary>
		/// <remarks>
		/// Указанный интерфейс должен реализовать элемент пользовательского интерфейса для того что иметь возможность
		/// эмулировать ввод данных с клавиатуры или кнопок мыши
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusVirtualButton
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Имя виртуальной кнопки
			/// </summary>
			String Name { get; }

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Статус удержания нажатой кнопки
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			Boolean IsButtonPressed { get; }

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Статус нажатия кнопки
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			Boolean IsButtonDown { get; }

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Статус отпускания кнопки
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			Boolean IsButtonUp { get; }
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для эмуляции смещения/перемещения по одномерной оси
		/// </summary>
		/// <remarks>
		/// Указанный интерфейс должен реализовать элемент пользовательского интерфейса для того что иметь возможность
		/// эмулировать ввод данных с одномерных линейных перемещений(скролл мыши)
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusVirtualAxis
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Имя виртуальной оси
			/// </summary>
			String Name { get; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение смещения/перемещения по оси
			/// </summary>
			/// <remarks>
			/// Перемещение/смещение всегда указывается в относительных единицах в диапазоне от [-1; 1]
			/// </remarks>
			/// <returns>Смещение/перемещение по оси</returns>
			//---------------------------------------------------------------------------------------------------------
			Single GetAxis();
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для эмуляции смещения/перемещения по двумерной оси
		/// </summary>
		/// <remarks>
		/// Указанный интерфейс должен реализовать элемент пользовательского интерфейса для того что иметь возможность
		/// эмулировать ввод данных с двухмерных линейных перемещений (курсор мыши, гироскоп)
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusVirtualJoystick
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Имя виртуального джойстика
			/// </summary>
			String Name { get; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение смещения/перемещения по осям
			/// </summary>
			/// <remarks>
			/// Перемещение/смещение всегда указывается в относительных единицах в диапазоне от [-1; 1]
			/// </remarks>
			/// <returns>Смещение/перемещение по осям</returns>
			//---------------------------------------------------------------------------------------------------------
			Vector2 GetAxis();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение смещения/перемещения по горизонтальной оси
			/// </summary>
			/// <returns>Смещение/перемещение по горизонтальной оси</returns>
			//---------------------------------------------------------------------------------------------------------
			Single GetAxisHorizontal();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение смещения/перемещения по вертикальной оси
			/// </summary>
			/// <returns>Смещение/перемещение по вертикальной оси</returns>
			//---------------------------------------------------------------------------------------------------------
			Single GetAxisVertical();
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для оповещения о нажатии указателя
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusPointerDown
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Событие нажатия
			/// </summary>
			/// <param name="pointer_id">Идентификатор указателя</param>
			//---------------------------------------------------------------------------------------------------------
			void PointerDown(Int32 pointer_id);
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для оповещения о перемещении указателя
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusPointerMove
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Событие перемещения
			/// </summary>
			/// <param name="pointer_id">Идентификатор указателя</param>
			//---------------------------------------------------------------------------------------------------------
			void PointerMove(Int32 pointer_id);
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для оповещения удерживания указателя
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusPointerPress
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Событие удерживания
			/// </summary>
			/// <param name="pointer_id">Идентификатор указателя</param>
			//---------------------------------------------------------------------------------------------------------
			void PointerPress(Int32 pointer_id);
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для оповещения отпускания указателя
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusPointerUp
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Событие отпускания
			/// </summary>
			/// <param name="pointer_id">Идентификатор указателя</param>
			//---------------------------------------------------------------------------------------------------------
			void PointerUp(Int32 pointer_id);
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================