//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль базового ядра
// Подраздел: Подсистема работы с датой и временем
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusDateTimeCommon.cs
*		Общие типы и структуры данных для работы с датой и временем.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \defgroup CoreDateTime Подсистема работы с датой и временем
		//! Подсистема работы с датой и временем обеспечивает дополнительные функциональные возможности для работы
		//! с временным интервалом и временным периодом.
		//! \ingroup Core
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Статический класс реализующий дополнительные методы для работы с типом <see cref="DateTime"/>
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public static class XDateTime
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение текущей даты в тестовом формате UTC
			/// </summary>
			/// <returns>Дата в текстовом формате UTC</returns>
			//---------------------------------------------------------------------------------------------------------
			public static String GetStrDateUTC()
			{
				return (DateTime.Now.ToStrDateUTC());
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение текущей даты/времени в тестовом формате
			/// </summary>
			/// <returns>Дата/время в текстовом формате</returns>
			//---------------------------------------------------------------------------------------------------------
			public static String GetStrDateTime()
			{
				return (DateTime.Now.ToStrDateTime());
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение текущей даты/времени в тестовом формате
			/// </summary>
			/// <returns>Дата/время в текстовом формате</returns>
			//---------------------------------------------------------------------------------------------------------
			public static String GetStrDateTimeShort()
			{
				return (DateTime.Now.ToStrDateTimeShort());
			}
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Временной интервал
		/// </summary>
		/// <remarks>
		/// Временной интервал это некая абстракция для выполнения действие через фиксированные интервал времени.
		/// Он может характеризовать, как и реальные временные интервалы, так и некие абстрактные игровые интервалы 
		/// привязанные к настоящим временным интервалам 
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		[TypeConverter(typeof(EnumToStringConverter<TTimeInterval>))]
		public enum TTimeInterval
		{
			/// <summary>
			/// Минутный
			/// </summary>
			[Description("Минутный")]
			Minutely,

			/// <summary>
			/// Часовой
			/// </summary>
			[Description("Часовой")]
			Hourly,

			/// <summary>
			/// Дневной
			/// </summary>
			[Description("Дневной")]
			Daily,

			/// <summary>
			/// Недельный
			/// </summary>
			[Description("Недельный")]
			Weekly,

			/// <summary>
			/// Месячный
			/// </summary>
			[Description("Месячный")]
			Monthly,

			/// <summary>
			/// Годовой
			/// </summary>
			[Description("Годовой")]
			Yearly
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для объектов которые имеют временной признак
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusDateTimeable : ICloneable
		{
			/// <summary>
			/// Дата
			/// </summary>
			DateTime Date { get; set; }
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================