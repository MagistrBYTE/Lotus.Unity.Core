//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль базового ядра
// Подраздел: Подсистема отображения данных
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusDataViewCommon.cs
*		Определение общих типов и структур данных подсистемы отображения данных.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 04.04.2021
//=====================================================================================================================
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \defgroup CoreDataView Подсистема отображения данных
		//! Подсистема отображения данных является мощной, гибкой, промежуточной подсистемой между реальными
		//! данными(слой логики) и элементами пользовательского интерфейса которые эти данные отображают.
		//! \ingroup Core
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Определение интерфейса для объекта который может быть выбран
		/// </summary>
		/// <remarks>
		/// <para>
		/// Обычно логика пользовательского интерфейса должно быть отделена от основной логики приложения, 
		/// однако иногда бывает необходимость определять некоторые типовые действия в элементах пользовательского 
		/// интерфейса и правильно на них реагировать.
		/// </para>
		/// <para>
		/// Благодаря реализации данному интерфейсу объект может реагировать когда он подлежит выбору, а также корректно
		/// реагировать на этот выбор.
		/// </para>
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusViewSelected
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка статуса выбора объекта
			/// </summary>
			/// <param name="view_item">Элемент отображения</param>
			/// <param name="selected">Статус выбора объекта</param>
			//---------------------------------------------------------------------------------------------------------
			void SetViewSelected(ILotusViewItem view_item, Boolean selected);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Возможность выбора объекта
			/// </summary>
			/// <remarks>
			/// Имеется виду возможность выбора объекта в данный момент
			/// </remarks>
			/// <param name="view_item">Элемент отображения</param>
			/// <returns>Возможность выбора</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean CanViewSelected(ILotusViewItem view_item);
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Определение интерфейса для объекта который может быть недоступен
		/// </summary>
		/// <remarks>
		/// <para>
		/// Обычно логика пользовательского интерфейса должно быть отделена от основной логики приложения, 
		/// однако иногда бывает необходимость определять некоторые типовые действия в элементах пользовательского 
		/// интерфейса и правильно на них реагировать.
		/// </para>
		/// <para>
		/// Благодаря реализации данному интерфейсу объект может реагировать когда он недоступен, а также корректно
		/// реагировать на этот статус.
		/// </para>
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusViewEnabled
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка статуса недоступности объекта
			/// </summary>
			/// <param name="view_item">Элемент отображения</param>
			/// <param name="enabled">Статус недоступности</param>
			//---------------------------------------------------------------------------------------------------------
			void SetViewEnabled(ILotusViewItem view_item, Boolean enabled);
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Определение интерфейса для объекта который может быть представлен
		/// </summary>
		/// <remarks>
		/// <para>
		/// Обычно логика пользовательского интерфейса должно быть отделена от основной логики приложения, 
		/// однако иногда бывает необходимость определять некоторые типовые действия в элементах пользовательского 
		/// интерфейса и правильно на них реагировать.
		/// </para>
		/// <para>
		/// Благодаря реализации данному интерфейсу объект может реагировать когда он представлен, а также корректно
		/// реагировать на этот статус.
		/// </para>
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusViewPresented
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка статуса представления объекта
			/// </summary>
			/// <param name="view_item">Элемент отображения</param>
			/// <param name="presented">Статус представления объекта</param>
			//---------------------------------------------------------------------------------------------------------
			void SetViewPresented(ILotusViewItem view_item, Boolean presented);
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Определение интерфейса для объекта который может быть "раскрыт"
		/// </summary>
		/// <remarks>
		/// <para>
		/// Применяется в основном для иерархические отношений, в целях оптимизации получения данных.
		/// </para>
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusViewExpanded
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка статуса раскрытия объекта
			/// </summary>
			/// <param name="view_item">Элемент отображения</param>
			/// <param name="expanded">Статус раскрытия объекта</param>
			//---------------------------------------------------------------------------------------------------------
			void SetViewExpanded(ILotusViewItemHierarchy view_item, Boolean expanded);
		}


		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Определение интерфейса для хранения ссылки на элемент отображения
		/// </summary>
		/// <remarks>
		/// Конечно, основная логика не должна зависеть от логики пользовательского интерфейса. Тем не менее, иногда, 
		/// в целях упрощения или оптимизации, необходимо знать элемент отображения
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusViewItemOwner
		{
			/// <summary>
			/// Элемент отображения
			/// </summary>
			ILotusViewItem OwnerViewItem { get; set; }
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Определение интерфейса для посторенния элементов отображения согласно модели данных
		/// </summary>
		/// <remarks>
		/// Реализация данного интерфейса позволяет построить определённым образом или плоскую модель отображения 
		/// или иерархическую
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusViewItemBuilder
		{
			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение количества дочерних узлов
			/// </summary>
			/// <returns>Количество дочерних узлов</returns>
			//---------------------------------------------------------------------------------------------------------
			Int32 GetCountChildrenNode();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение дочернего узла по индексу
			/// </summary>
			/// <param name="index">Индекс дочернего узла</param>
			/// <returns>Дочерней узел</returns>
			//---------------------------------------------------------------------------------------------------------
			System.Object GetChildrenNode(Int32 index);
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================