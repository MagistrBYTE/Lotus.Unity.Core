//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль базового ядра
// Подраздел: Подсистема объектного пула
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusObjectPoolDispatcher.cs
*		Глобальный диспетчер для управления диспетчерами пулом объектов.
*		Реализация диспетчер который обеспечивает глобальный доступ к всем зарегистрированным диспетчерам пулом объектов.
*	Доступ к зарегистрированным диспетчерам пулом объектов осуществляется по уникальному целочисленному идентификатору.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 04.04.2021
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.ComponentModel;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CoreObjectPool
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Глобальный диспетчер для управления диспетчерами пулом объектов
		/// </summary>
		/// <remarks>
		/// Реализация диспетчер который обеспечивает глобальный доступ к всем зарегистрированным диспетчерам пулом объектов.
		/// Доступ к зарегистрированным диспетчерам пулом объектов осуществляется по уникальному целочисленному идентификатору.
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public static class XPoolDispatcher
		{
			#region ======================================= ДАННЫЕ ====================================================
			/// <summary>
			/// Словарь диспетчеров пулом объектов
			/// </summary>
			public readonly static Dictionary<Int32, ILotusPoolManager> PoolManagers = new Dictionary<Int32, ILotusPoolManager>();
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Регистрация диспетчера управления пулом объектов
			/// </summary>
			/// <param name="id">Уникальный идентификатор диспетчера</param>
			/// <param name="manager">Диспетчер управления пулом объектов</param>
			/// <returns>Статус успешности регистрации</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean RegisterManager(Int32 id, ILotusPoolManager manager)
			{
				if (PoolManagers.ContainsKey(id)) return false;

				PoolManagers.Add(id, manager);
				return true;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Отмена регистрации диспетчер управления пулом объектов
			/// </summary>
			/// <param name="id">Уникальный идентификатор диспетчера</param>
			/// <returns>Статус успешности отмены регистрации</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean UnRegisterManager(Int32 id)
			{
				if (PoolManagers.ContainsKey(id))
				{
					PoolManagers.Remove(id);
					return true;
				}

				return false;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Взять готовый объект из пула
			/// </summary>
			/// <param name="id">Уникальный идентификатор диспетчера</param>
			/// <returns>Объект</returns>
			//---------------------------------------------------------------------------------------------------------
			public static TPoolObject Take<TPoolObject>(Int32 id)
			{
				ILotusPoolManager result;
				if(PoolManagers.TryGetValue(id, out result))
				{
					return (TPoolObject)result.TakeObjectFromPool();
				}

				return default(TPoolObject);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Освободить объект и положить его назад в пул
			/// </summary>
			/// <param name="id">Уникальный идентификатор диспетчера</param>
			/// <param name="pool_object">Объект</param>
			/// <returns>Статус успешности добавления объекта в пул</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean Release<TPoolObject>(Int32 id, TPoolObject pool_object)
			{
				ILotusPoolManager result;
				if (PoolManagers.TryGetValue(id, out result))
				{
					result.ReleaseObjectToPool(pool_object);
					return true;
				}

				return false;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================