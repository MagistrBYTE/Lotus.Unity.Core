//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль базового ядра
// Подраздел: Подсистема сообщений
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusMessageCommon.cs
*		Общие типы и интерфейсы подсистемы сообщений.
*		Общие типы и структуры данных подсистемы сообщений и определение основных интерфейсов для уведомления всех
*	подписчиков о произошедшем событии.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 04.04.2021
//=====================================================================================================================
using System;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \defgroup CoreMessage Подсистема сообщений
		//! Централизованная подсистема сообщений. Подсистема сообщений предназначена для уведомления всех подписчиков
		//! о произошедшем событии.
		//!
		//! ## Возможности/особенности
		//! 1. Возможность отправить сообщение любой группе подписчиков
		//! 2. Легкость реализации обработчика сообщений, гибкое управление группами
		//! 3. Минимальные накладные расходы, высокая скорость работы
		//! 4. Низкая связность и зависимость подсистемы от других подсистем
		//! 5. Полностью интегрирована в систему Lotus в качестве основной
		//!
		//! ## Описание
		//! Подсистема сообщений очень простая. Отправка сообщений происходит через статический метод центрального диспетчера
		//! сообщений \ref Lotus.Core.XMessageDispatcher. Для обработки сообщения нужно реализовать соответствующий интерфейс 
		//! \ref Lotus.Core.ILotusMessageHandler. 
		//! Компонент с реализаций интерфейса нужно зарегистрировать в диспетчере. Сообщения поступают в очередь и последовательно
		//! обрабатываются. Сообщения можно послать всем подписчикам или только одной группе. Сообщения также можно послать
		//! из консоли. Многие подсистемы реализует интерфейс сообщений для централизованного и унифицированного управления.
		//!
		//! ## Использование
		//! 1. Реализовать интерфейс \ref Lotus.Core.ILotusMessageHandler
		//! 2. Зарегистрировать компонент в диспетчере \ref Lotus.Core.XMessageDispatcher
		//! 3. Теперь можно посылать команды через диспетчер \ref Lotus.Core.XMessageDispatcher
		//! 4. Диспетчер можно использовать в ручную(непосредственно вызывать его методы в нужных местах) или 
		//! посредством \ref Lotus.Common.LotusSystemDispatcher
		//! \ingroup Core
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс для определения аргумента сообщения
		/// </summary>
		/// <remarks>
		/// Фактические данный класс реализует полноценное хранение данных о произошедшем событии, источники событии.
		/// Чтобы исключить накладные расходы связанные с фрагментацией памяти малыми объектами, объекты классы управляются
		/// через пул.
		/// Таким образом фактически происходит циркуляция сообщений в системе без существенных накладных затрат
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public class CMessageArgs : CVariant, ILotusPoolObject
		{
			#region ======================================= ДАННЫЕ ====================================================
			// Основные параметры
			internal Int32 mID;
			internal String mName;
			internal System.Object mSender;
			internal Boolean mIsPoolObject;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Уникальный идентификатор сообщения
			/// </summary>
			public Int32 ID
			{
				get { return mID; }
				set { mID = value; }
			}

			/// <summary>
			/// Наименование сообщения
			/// </summary>
			public String Name
			{
				get { return mName; }
				set { mName = value; }
			}

			/// <summary>
			/// Источник сообщения
			/// </summary>
			public System.Object Sender
			{
				get { return mSender; }
				set { mSender = value; }
			}

#if UNITY_2017_1_OR_NEWER
			/// <summary>
			/// Источник сообщения - как пользовательский скрипт
			/// </summary>
			public UnityEngine.MonoBehaviour SenderBehaviour
			{
				get { return mSender as UnityEngine.MonoBehaviour; }
				set { mSender = value; }
			}
#endif

			/// <summary>
			/// Статус объекта из пула
			/// </summary>
			public Boolean IsPoolObject
			{
				get { return mIsPoolObject; }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CMessageArgs()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя сообщения</param>
			/// <param name="is_pool">Статус размещения объекта в пуле</param>
			//---------------------------------------------------------------------------------------------------------
			public CMessageArgs(String name, Boolean is_pool = false)
			{
				mName = name;
				mIsPoolObject = is_pool;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="id">Уникальный идентификатор сообщения</param>
			/// <param name="is_pool">Статус размещения объекта в пуле</param>
			//---------------------------------------------------------------------------------------------------------
			public CMessageArgs(Int32 id, Boolean is_pool = false)
			{
				mID = id;
				mIsPoolObject = is_pool;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя сообщения</param>
			/// <param name="id">Уникальный идентификатор сообщения</param>
			/// <param name="is_pool">Статус размещения объекта в пуле</param>
			//---------------------------------------------------------------------------------------------------------
			public CMessageArgs(String name, Int32 id, Boolean is_pool = false)
			{
				mName = name;
				mID = id;
				mIsPoolObject = is_pool;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя сообщения</param>
			/// <param name="sender">Компонент - источник события</param>
			/// <param name="is_pool">Статус размещения объекта в пуле</param>
			//---------------------------------------------------------------------------------------------------------
			public CMessageArgs(String name, System.Object sender, Boolean is_pool = false)
			{
				mName = name;
				mSender = sender;
				mIsPoolObject = is_pool;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="id">Уникальный идентификатор сообщения</param>
			/// <param name="sender">Источник события</param>
			/// <param name="is_pool">Статус размещения объекта в пуле</param>
			//---------------------------------------------------------------------------------------------------------
			public CMessageArgs(Int32 id, System.Object sender, Boolean is_pool = false)
			{
				mID = id;
				mSender = sender;
				mIsPoolObject = is_pool;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя сообщения</param>
			/// <param name="id">Уникальный идентификатор сообщения</param>
			/// <param name="sender">Компонент - источник события</param>
			/// <param name="is_pool">Статус размещения объекта в пуле</param>
			//---------------------------------------------------------------------------------------------------------
			public CMessageArgs(String name, Int32 id, System.Object sender, Boolean is_pool = false)
			{
				mName = name;
				mSender = sender;
				mIsPoolObject = is_pool;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="is_pool">Статус размещения объекта в пуле</param>
			//---------------------------------------------------------------------------------------------------------
			public CMessageArgs(Boolean is_pool)
			{
				mIsPoolObject = is_pool;
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление сообщения</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return("Name <" + mName + "> Value[" + ValueType.ToString() + "] = " + GetAsString());
			}
			#endregion

			#region ======================================= МЕТОДЫ ILotusPoolObject ===================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Псевдо-конструктор
			/// </summary>
			/// <remarks>
			/// Вызывается диспетчером пула в момент взятия объекта из пула
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			public void OnPoolTake()
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Псевдо-деструктор
			/// </summary>
			/// <remarks>
			/// Вызывается диспетчером пула в момент попадания объекта в пул
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			public void OnPoolRelease()
			{
				mValueType = TValueType.Void;
				mSender = null;
				mName = "";
				mID = 0;
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Структура для хранения сообщений
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public struct TMessageHolder
		{
			#region ======================================= КОНСТАНТНЫЕ ДАННЫЕ ========================================
			/// <summary>
			/// Сообщение выполнено с отрицательным результатом
			/// </summary>
			public const Int32 NEGATIVE_RESULT = 1;

			/// <summary>
			/// Сообщение не обработано
			/// </summary>
			public const Int32 NOT_PROCESSED = 2;
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			/// <summary>
			/// Группа
			/// </summary>
			public String Group;

			/// <summary>
			/// Сообщение
			/// </summary>
			public CMessageArgs Message;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="group">Группа для которой отправляются сообщения</param>
			//---------------------------------------------------------------------------------------------------------
			public TMessageHolder(String group)
			{
				Group = group;
				Message = null;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="group">Группа для которой отправляются сообщения</param>
			/// <param name="message">Аргументы сообщения</param>
			//---------------------------------------------------------------------------------------------------------
			public TMessageHolder(String group, CMessageArgs message)
			{
				Group = group;
				Message = message;
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение описания статуса обработки сообщения
			/// </summary>
			/// <param name="code">Код</param>
			/// <returns>Описание статуса обработки сообщения</returns>
			//---------------------------------------------------------------------------------------------------------
			public String GetStatusDesc(Int32 code)
			{
				String result = "Message: " + Message.ToString() + " for group <" + Group + ">";
				switch (code)
				{
					case NEGATIVE_RESULT:
						{
							result += " == NEGATIVE_RESULT";
						}
						break;
					case NOT_PROCESSED:
						{
							result += " == NOT_PROCESSED";
						}
						break;
					default:
						break;
				}

				return (result);
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для определения возможности обработки сообщения
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusMessageHandler
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Группа которой принадлежит данный обработчик событий
			/// </summary>
			String MessageHandlerGroup { get; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Основной метод для обработки сообщения
			/// </summary>
			/// <param name="args">Аргументы сообщения</param>
			/// <returns>Статус успешности обработки сообщений</returns>
			//---------------------------------------------------------------------------------------------------------
			Boolean OnMessageHandler(CMessageArgs args);
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================