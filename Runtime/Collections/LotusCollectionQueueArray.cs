//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль базового ядра
// Подраздел: Подсистема коллекций
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusCollectionQueueArray.cs
*		Очередь на основе массива.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 04.04.2021
//=====================================================================================================================
using System;
using System.Collections;
using System.Collections.Generic;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CoreCollections
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Очередь на основе массива
		/// </summary>
		/// <remarks>
		/// Реализация очереди на основе массива, с полной поддержкой функциональности <see cref="ListArray{TItem}"/>
		/// с учетом особенности реализации очереди
		/// </remarks>
		/// <typeparam name="TItem">Тип элемента очереди</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class QueueArray<TItem> : ListArray<TItem>
		{
			#region ======================================= ДАННЫЕ ====================================================
			// Основные параметры
			protected Int32 mHead;
			protected Int32 mTail;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			//
			// ОСНОВНЫЕ ПАРАМЕТРЫ
			//
			/// <summary>
			/// Индекс текущего элемента в начале(голове) очереди
			/// </summary>
			public Int32 Head
			{
				get { return mHead; }
			}

			/// <summary>
			/// Индекс текущего добавленного элемента в конец(хвост) очереди
			/// </summary>
			public Int32 Tail
			{
				get { return mTail; }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные очереди предустановленными данными
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public QueueArray()
				: base(INIT_MAX_COUNT)
			{
				mHead = 0;
				mTail = -1;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные очереди указанными данными
			/// </summary>
			/// <param name="max_count">Максимальное количество элементов</param>
			//---------------------------------------------------------------------------------------------------------
			public QueueArray(Int32 max_count)
				: base(max_count)
			{
				mHead = 0;
				mTail = -1;
			}
			#endregion

			#region ======================================= ИНДЕКСАТОР ================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Индексация элементов очереди
			/// </summary>
			/// <param name="index">Индекс элемента</param>
			/// <returns>Элемент очереди</returns>
			//---------------------------------------------------------------------------------------------------------
			new public TItem this[Int32 index]
			{
				get { return mArrayOfItems[(mHead + index) % mMaxCount]; }
				set
				{
					mArrayOfItems[(mHead + index) % mMaxCount] = value;
				}
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение элемента очереди по индексу
			/// </summary>
			/// <param name="index">Индекс элемента очереди</param>
			/// <returns>Элемент очереди</returns>
			//---------------------------------------------------------------------------------------------------------
			public TItem GetElement(Int32 index)
			{
				return mArrayOfItems[(mHead + index) % mMaxCount];
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавление элемента в конец очереди
			/// </summary>
			/// <param name="item">Элемент</param>
			//---------------------------------------------------------------------------------------------------------
			public void Enqueue(TItem item)
			{
				// Если текущие количество элементов равно максимально возможному
				if (mCount == mMaxCount)
				{
					mMaxCount = mMaxCount * 2;
					TItem[] items = new TItem[mMaxCount];
					Array.Copy(mArrayOfItems, items, mCount);
					mArrayOfItems = items;
				}

				mCount++;
				mTail = (mTail + 1) % mMaxCount;
				mArrayOfItems[mTail] = item;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Взятие и удаление элемента из головы очереди
			/// </summary>
			/// <returns>Элемент</returns>
			//---------------------------------------------------------------------------------------------------------
			public TItem Dequeue()
			{
				if (mCount > 0)
				{
					TItem item = mArrayOfItems[mHead];
					mArrayOfItems[mHead] = default(TItem);
					mHead = (mHead + 1) % mMaxCount;
					mCount--;
					return item;
				}
				else
				{
#if (UNITY_2017_1_OR_NEWER)
					UnityEngine.Debug.LogError("Not element in queue!!!");
#else
					XLogger.LogError("Not element in queue!!!");
#endif
					return default(TItem);
				}

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Взятие элемента из головы очереди (без его удаления)
			/// </summary>
			/// <returns>Элемент</returns>
			//---------------------------------------------------------------------------------------------------------
			public TItem Peek()
			{
				if (mCount > 0)
				{
					return mArrayOfItems[mHead];
				}
				else
				{
#if (UNITY_2017_1_OR_NEWER)
					UnityEngine.Debug.LogError("Not element in queue!!!");
#else
					XLogger.LogError("Not element in queue!!!");
#endif
					return default(TItem);
				}

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на наличие элемента в очереди
			/// </summary>
			/// <param name="item">Элемент</param>
			/// <returns>Статус наличия</returns>
			//---------------------------------------------------------------------------------------------------------
			public new Boolean Contains(TItem item)
			{
				Int32 index = mHead;
				Int32 count = mCount;

				while (count-- > 0)
				{
					if (mArrayOfItems[index].Equals(item))
					{
						return true;
					}
					index = (index + 1) % mMaxCount;
				}

				return false;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Очистка очереди
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public new void Clear()
			{
				if (mHead < mTail)
				{
					Array.Clear(mArrayOfItems, mHead, mCount);
				}
				else
				{
					Array.Clear(mArrayOfItems, mHead, mMaxCount - mHead);
					Array.Clear(mArrayOfItems, 0, mTail);
				}

				mHead = 0;
				mTail = -1;
				mCount = 0;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================