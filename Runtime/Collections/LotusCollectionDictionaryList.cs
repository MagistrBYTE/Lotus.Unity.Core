//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль базового ядра
// Подраздел: Подсистема коллекций
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusCollectionDictionaryList.cs
*		Словарь содержащий в качестве значений список определенного типа.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.01.2022
//=====================================================================================================================
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CoreCollections
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Словарь содержащий в качестве значений список определенного типа
		/// </summary>
		/// <typeparam name="TKey">Тип ключа словаря</typeparam>
		/// <typeparam name="TValue">Тип значения списка словаря</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class DictionaryList<TKey, TValue> : Dictionary<TKey, ListArray<TValue>>
		{
			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные словаря предустановленными данными
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public DictionaryList()
				: base()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные словаря указанными данными
			/// </summary>
			/// <param name="capacity">Емкость</param>
			//---------------------------------------------------------------------------------------------------------
			public DictionaryList(Int32 capacity)
				: base(capacity)
			{

			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Добавление пары ключ - значение
			/// </summary>
			/// <param name="key">Ключ</param>
			/// <param name="item">Элемент</param>
			//---------------------------------------------------------------------------------------------------------
			public void Add(TKey key, TValue item)
			{
				if(ContainsKey(key))
				{
					ListArray<TValue> list = this[key];
					list.Add(item);
				}
				else
				{
					ListArray<TValue> list = new ListArray<TValue>();
					list.Add(item);
					Add(key, list);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на наличие элемента в списке значение
			/// </summary>
			/// <param name="item">Элемент</param>
			/// <returns>Статус наличия</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean ContainsValue(TValue item)
			{
				Boolean result = false;

				foreach (var list in Values)
				{
					if(list.Contains(item))
					{
						return true;
					}
				}

				return result;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление элемента в списке значение
			/// </summary>
			/// <param name="item">Элемент</param>
			/// <returns>Статус успешности удаления</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean RemoveValue(TValue item)
			{
				Boolean result = false;

				foreach (var list in Values)
				{
					Int32 index = list.IndexOf(item);
					if(index > -1)
					{
						list.RemoveAt(index);

						// Если это последний элемент то удаляем сам список и ключ
						if (list.Count == 0)
						{
							var key = this.FirstOrDefault(x => x.Value == list).Key;
							Remove(key);
						}

						return true;
					}
				}

				return result;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Удаление элемента в списке значение
			/// </summary>
			/// <param name="key">Ключ</param>
			/// <param name="item">Элемент</param>
			/// <returns>Статус успешности удаления</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean RemoveValue(TKey key, TValue item)
			{
				Boolean result = false;

				foreach (var list in Values)
				{
					Int32 index = list.IndexOf(item);
					if (index > -1)
					{
						list.RemoveAt(index);

						// Если это последний элемент то удаляем сам список и ключ
						if (list.Count == 0)
						{
							Remove(key);
						}

						return true;
					}
				}

				return result;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================