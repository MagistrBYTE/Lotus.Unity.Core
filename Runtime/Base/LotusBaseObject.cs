//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль базового ядра
// Подраздел: Базовая подсистема
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusBaseObject.cs
*		Работа с обобщенными и базовыми типами платформы NET.
*		Реализация дополнительных методов работы с обобщенными и базовыми типами платформы NET.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 04.04.2021
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CoreBase
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Статический класс реализующий методы применяемые в целом для всех объектов платформы NET.
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public static class XObject
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обмен значениями двух объектов
			/// </summary>
			/// <typeparam name="TType">Тип объекта</typeparam>
			/// <param name="left">Первое значение</param>
			/// <param name="right">Второе значение</param>
			//---------------------------------------------------------------------------------------------------------
			public static void Swap<TType>(ref TType left, ref TType right)
			{
				TType temp = left;
				left = right;
				right = temp;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Универсальный и безопасный метод сравнение двух объектов
			/// </summary>
			/// <remarks>
			/// Применяется когда неизвестен тип объекта (ссылочный или значение)
			/// </remarks>
			/// <typeparam name="TType">Тип объекта</typeparam>
			/// <param name="left">Объект</param>
			/// <param name="right">Объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean GenericEquals<TType>(ref TType left, ref TType right)
			{
				if (typeof(TType).IsValueType)
				{
					return (left.Equals(right));
				}
				else
				{
					if (left != null)
					{
						return (left.Equals(right));
					}
					else
					{
						if (right != null)
						{
							return (right.Equals(left));
						}
					}
				}

				return (true);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов по возрастанию
			/// </summary>
			/// <param name="left">Первый объект</param>
			/// <param name="right">Второй объект</param>
			/// <returns>Статус сравнения</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Int32 ComprareOfAscending<TType>(TType left, TType right) where TType : class
			{
				if (left == null)
				{
					if (right == null)
					{
						return (0);
					}
					else
					{
						return (1);
					}
				}
				else
				{
					if (right == null)
					{
						return (-1);
					}
					else
					{
						if (left is IComparable<TType> left_comparable)
						{
							return (left_comparable.CompareTo(right));
						}
						else
						{
							if (left is IComparable left_comparable_generic)
							{
								return (left_comparable_generic.CompareTo(right));
							}
							else
							{
								return (0);
							}
						}
					}
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов по убыванию
			/// </summary>
			/// <param name="left">Первый объект</param>
			/// <param name="right">Второй объект</param>
			/// <returns>Статус сравнения</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Int32 ComprareOfDescending<TType>(TType left, TType right) where TType : class
			{
				Int32 result = ComprareOfAscending(left, right);
				if (result == 1)
				{
					return (-1);
				}
				else
				{
					if (result == -1)
					{
						return (1);
					}
					else
					{
						return (0);
					}
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Универсальный и безопасный метод сравнение двух объектов ссылочного типа
			/// </summary>
			/// <param name="left">Объект</param>
			/// <param name="right">Объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean ObjectEquals(System.Object left, System.Object right)
			{
				if (left != null)
				{
					return (left.Equals(right));
				}
				else
				{
					if (right != null)
					{
						return (right.Equals(left));
					}
				}

				return (true);
			}
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Статический класс реализующий дополнительные методы для работы с типом <see cref="Boolean"/>
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public static class XBoolean
		{
			/// <summary>
			/// Текстовые значение логического типа которые означает истинное значение
			/// </summary>
			public static readonly String[] TrueValues = new String[]
			{
				"True",
				"true",
				"1",
				"on",
				"On",
				"истина",
				"Истина",
				"да",
				"Да"
			};

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование текста в логическое значение
			/// </summary>
			/// <param name="text">Текст</param>
			/// <returns>Значение</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean Parse(String text)
			{
				return (Array.IndexOf(TrueValues, text) > -1);
			}
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================