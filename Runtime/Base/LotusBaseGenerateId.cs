//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль базового ядра
// Подраздел: Базовая подсистема
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusBaseGenerateId.cs
*		Определение класса реализующего работу по генерации идентификаторов и уникальных значений.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.ComponentModel;
using System.Globalization;
using System.Text;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CoreBase
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Статический класс реализующий работу генерации идентификаторов и уникальных значений
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public static class XGenerateId
		{
			#region ======================================= КОНСТАНТНЫЕ ДАННЫЕ ========================================
			/// <summary>
			/// 1 января 2020 года
			/// </summary>
			private static readonly DateTime StartDate = new DateTime(2020, 1, 1);
			#endregion

			#region ======================================= МЕТОДЫ ГЕНЕРАЦИИ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Генерация уникального числового идентификатора указанного объекта
			/// </summary>
			/// <remarks>
			/// В первые 28 бита - записывается хэш-код объекта деленный на 16
			/// В остальные 36 - количество 10 миллисекунд прошедших с 1 января 2020 года
			/// </remarks>
			/// <param name="obj">Объект</param>
			/// <returns>Уникальный числовой идентификатор</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Int64 Generate(System.Object obj)
			{
				if (obj == null)
				{
					return (-1);
				}
				else
				{
					DateTime current_date = DateTime.UtcNow;
					Int64 elapsed_ticks = current_date.Ticks - StartDate.Ticks;
					Int64 elapsed_millisecond = elapsed_ticks / 100000;

					Int64 result = 0;

					// Пакуем хеш код
					XPacked.PackLong(ref result, 0, 28, obj.GetHashCode()/16);

					// Пакуем дату
					XPacked.PackLong(ref result, 28, 36, elapsed_millisecond);

					return (result);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Распаковка и получение хеш-кода из уникального числового идентификатора
			/// </summary>
			/// <param name="id">Уникальный числовой идентификатор</param>
			/// <returns>Хеш-код</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Int32 UnpackIdToHashCode(Int64 id)
			{
				return ((Int32)XPacked.UnpackLong(id, 0, 28) * 16);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Распаковка и получение даты создания из уникального числового идентификатора
			/// </summary>
			/// <param name="id">Уникальный числовой идентификатор</param>
			/// <returns>Дата создания</returns>
			//---------------------------------------------------------------------------------------------------------
			public static DateTime UnpackIdToDateTime(Int64 id)
			{
				Int64 elapsed_millisecond = XPacked.UnpackLong(id, 28, 36);
				Int64 elapsed_ticks = elapsed_millisecond * 100000;
				DateTime result = new DateTime(StartDate.Ticks + elapsed_ticks);
				return (result);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================